 !function() {
    class e {
        getCore(e) {
            var t=this.config.system;

            if(e) {
                let e= {
                    a5200: "atari5200", beetle_vb:"vb", desmume:"nds", desmume2015:"nds", fbalpha2012_cps1:"arcade", fbalpha2012_cps2:"arcade", fbneo:"arcade", fceumm:"nes", gambatte:"gb", gearcoleco:"coleco", genesis_plus_gx:"sega", handy:"lynx", mame2003:"mame", mame2003_plus:"mame", mednafen_ngp:"ngp", mednafen_pce:"pce", mednafen_pcfx:"pcfx", mednafen_psx_hw:"psx", mednafen_wswan:"ws", melonds:"nds", mgba:"gba", mupen64plus_next:"n64", nestopia:"nes", opera:"3do", parallel_n64:"n64", pcsx_rearmed:"psx", picodrive:"sega", ppsspp:"psp", prosystem:"atari7800", snes9x:"snes", stella2014:"atari2600", virtualjaguar:"jaguar", yabause:"segaSaturn", puae:"amiga", vice_x64sc:"c64", vice_x128:"c128", vice_xpet:"pet", vice_xplus4:"plus4", vice_xvic:"vic20"
                }

                ;
                return e[t]||t
            }

            let i= {
                jaguar: "virtualjaguar", lynx:"handy", segaSaturn:"yabause", segaMS:"smsplus", segaMD:"genesis_plus_gx", segaGG:"genesis_plus_gx", segaCD:"genesis_plus_gx", sega32x:"picodrive", atari2600:"stella2014", atari7800:"prosystem", nes:"fceumm", snes:"snes9x", atari5200:"a5200", gb:"gambatte", gba:"mgba", vb:"beetle_vb", n64:"mupen64plus_next", nds:"melonds", mame:"mame2003_plus", arcade:"fbneo", psx:"pcsx_rearmed", "3do":"opera", psp:"ppsspp", pce:"mednafen_pce", pcfx:"mednafen_pcfx", ngp:"mednafen_ngp", ws:"mednafen_wswan", coleco:"gearcoleco", amiga:"puae", c64:"vice_x64sc", c128:"vice_x128", pet:"vice_xpet", plus4:"vice_xplus4", vic20:"vice_xvic"
            }

            ;
            return this.isSafari&&this.isMobile&&"n64"===this.getCore( !0)?"parallel_n64":this.supportsWebgl2||"psx" !==this.getCore( !0)?i[t]||t:"mednafen_psx_hw"
        }

        createElement(e) {
            return document.createElement(e)
        }

        addEventListener(t, e, i) {
            var n=e.split(" "),
            s=[];

            for(let e=0; e<n.length; e++) {
                t.addEventListener(n[e], i);

                var o= {
                    cb: i, elem:t, listener:n[e]
                }

                ;
                s.push(o),
                this.listeners.push(o)
            }

            return s
        }

        removeEventListener(t) {
            for(let e=0; e<t.length; e++)t[e].elem.removeEventListener(t[e].listener, t[e].cb)
        }

        downloadFile(i, n, s, t, o) {
            var l=this.toData(i);

            if(l)l.then(e=> {
                    "HEAD"===o.method?n( {
                            headers: {}
                        }

                    ):n( {
                            headers: {}

                            , data:e
                        }

                    )
                }

            );

            else {
                l=t?"": this.config.dataPath;
                i=l+i,
                 !t&&this.config.filePaths&&"string"==typeof this.config.filePaths[i.split("/").pop()]&&(i=this.config.filePaths[i.split("/").pop()]);
                let e;

                try {
                    e=new URL(i)
                }

                catch(e) {}

                if(e&&["http:", "https:"].includes(e.protocol)|| !e) {
                    let t=new XMLHttpRequest;

                    s instanceof Function&&t.addEventListener("progress", e=> {
                            e=e.total?" "+Math.floor(e.loaded/e.total*100).toString()+"%":" "+(e.loaded/1048576).toFixed(2)+"MB"; s(e)
                        }

                    ),
                    t.onload=function() {
                        if(t.readyState===t.DONE) {
                            let e=t.response;
                            if(t.status.toString().startsWith("4")||t.status.toString().startsWith("5"))n(-1);

                            else {
                                try {
                                    e=JSON.parse(e)
                                }

                                catch(e) {}

                                n( {
                                        data:e, headers: {
                                            "content-length":t.getResponseHeader("content-length")
                                        }
                                    }

                                )
                            }
                        }
                    }

                    ,
                    o.responseType&&(t.responseType=o.responseType),
                    t.onerror=()=>n(-1),
                    t.open(o.method, i,  !0),
                    t.send()
                }

                else(async()=> {
                        if("HEAD"===o.method)n( {
                                headers: {}
                            }

                        ); else {
                            let e; try {
                                if(e=await fetch(i), o.type&&"arraybuffer"===o.type.toLowerCase()|| !o.type)e=await e.arrayBuffer(); else {
                                    e=await e.text(); try {
                                        e=JSON.parse(e)
                                    }

                                    catch(e) {}
                                }
                            }

                            catch(e) {
                                n(-1)
                            }

                            i.startsWith("blob:")&&URL.revokeObjectURL(i), n( {
                                    data:e, headers: {}
                                }

                            )
                        }
                    }

                )()
            }
        }

        toData(t, e) {
            return t instanceof ArrayBuffer||t instanceof Uint8Array||t instanceof Blob? ! !e||new Promise(async e=> {
                    t instanceof ArrayBuffer?e(new Uint8Array(t)):t instanceof Uint8Array?e(t):t instanceof Blob&&e(new Uint8Array(await t.arrayBuffer())), e()
                }

            ):null
        }

        checkForUpdates() {
            this.ejs_version.endsWith("-beta")?console.warn("Using EmulatorJS beta. Not checking for updates. This instance may be out of date. Using stable is highly recommended unless you build and ship your own cores."):fetch("https://cdn.emulatorjs.org/stable/data/version.json").then(e=> {
                    e.ok&&e.text().then(e=> {
                            e=JSON.parse(e); this.versionAsInt(this.ejs_version)<this.versionAsInt(e.version)&&console.log("Using EmulatorJS version "+this.ejs_version+" but the newest version is "+e.current_version+"\nopen https://github.com/EmulatorJS/EmulatorJS to update")
                        }

                    )
                }

            )
        }

        versionAsInt(e) {
            return e.endsWith("-beta")?99999999: (1===(e=e.split("."))[e.length-1].length&&(e[e.length-1]="0"+e[e.length-1]), parseInt(e.join("")))
        }

        constructor(e, t) {
            if(this.ejs_version="4.1.1", this.extensions=[], this.initControlVars(), this.debug= !0===window.EJS_DEBUG_XX, (this.debug||window.location&&["localhost", "127.0.0.1"].includes(location.hostname))&&this.checkForUpdates(), this.netplayEnabled= !0===window.EJS_DEBUG_XX&& !0===window.EJS_EXPERIMENTAL_NETPLAY, this.settingsLanguage=window.EJS_settingsLanguage|| !1, this.config=t, this.currentPopup=null, this.isFastForward= !1, this.isSlowMotion= !1, this.rewindEnabled="enabled"===this.preGetSetting("rewindEnabled"), this.touch= !1, this.cheats=[], this.started= !1, this.volume="number"==typeof this.config.volume?this.config.volume:.5, this.config.defaultControllers&&(this.defaultControllers=this.config.defaultControllers), this.muted= !1, this.paused= !0, this.listeners=[], this.missingLang=[], this.setElements(e), this.setColor(this.config.color||""), this.config.alignStartButton="string"==typeof this.config.alignStartButton?this.config.alignStartButton:"bottom", this.config.backgroundColor="string"==typeof this.config.backgroundColor?this.config.backgroundColor:"rgb(51, 51, 51)", this.config.adUrl&&(this.config.adSize=Array.isArray(this.config.adSize)?this.config.adSize:["300px", "250px"], this.setupAds(this.config.adUrl, this.config.adSize[0], this.config.adSize[1])), this.isMobile=(()=> {
                    }

                )(), this.canvas=this.createElement("canvas"), this.canvas.classList.add("ejs_canvas"), this.bindListeners(), this.config.netplayUrl=this.config.netplayUrl||"https://netplay.emulatorjs.org", this.fullscreen= !1, this.supportsWebgl2= ! !document.createElement("canvas").getContext("webgl2")&& !0 !==this.config.forceLegacyCores, this.webgl2Enabled= !("disabled"===(t=this.preGetSetting("webgl2Enabled"))|| !this.supportsWebgl2)&&("enabled"===t||null), this.isSafari=/^((? !chrome|android).)*safari/i.test(navigator.userAgent), this.config.disableDatabases?this.storage= {
                    rom:new window.EJS_DUMMYSTORAGE, bios:new window.EJS_DUMMYSTORAGE, core:new window.EJS_DUMMYSTORAGE
                }

                :this.storage= {
                    rom:new window.EJS_STORAGE("EmulatorJS-roms", "rom"), bios:new window.EJS_STORAGE("EmulatorJS-bios", "bios"), core:new window.EJS_STORAGE("EmulatorJS-core", "core")
                }

                , this.storage.states=new window.EJS_STORAGE("EmulatorJS-states", "states"), this.game.classList.add("ejs_game"), "string"==typeof this.config.backgroundImg?(this.game.classList.add("ejs_game_background"), this.config.backgroundBlur&&this.game.classList.add("ejs_game_background_blur"), this.game.setAttribute("style", "--ejs-background-image: url("+this.config.backgroundImg+"); --ejs-background-color: "+this.config.backgroundColor+";"), this.on("start", ()=> {
                            this.game.classList.remove("ejs_game_background"), this.config.backgroundBlur&&this.game.classList.remove("ejs_game_background_blur")
                        }

                    )):this.game.setAttribute("style", "--ejs-background-color: "+this.config.backgroundColor+";"), Array.isArray(this.config.cheats))for(let e=0; e<this.config.cheats.length; e++) {
                var i=this.config.cheats[e];

                Array.isArray(i)&&i[0]&&i[1]&&this.cheats.push( {
                        desc:i[0], checked: !1, code:i[1], is_permanent: !0
                    }

                )
            }

            this.createStartButton(),
            this.handleResize()
        }

        setColor(e) {
            function t(i) {
                if((i=i.toLowerCase())&&/^#([0-9a-fA-f] {
                            3
                        }

                        |[0-9a-fA-f] {
                            6
                        }

                    )$/.test(i)) {
                    if(4===i.length) {
                        let t="#";
                        for(let e=1; e<4; e++)t+=i.slice(e, e+1)+i.slice(e, e+1);
                        i=t
                    }

                    var t=[];
                    for(let e=1; e<7; e+=2)t.push(parseInt("0x"+i.slice(e, e+2), 16));
                    return t.join(", ")
                }

                return null
            }

            (e="string" !=typeof e?"":e)&&null !==t(e)?this.elements.parent.setAttribute("style", "--ejs-primary-color:"+t(e)+";"):this.elements.parent.setAttribute("style", "--ejs-primary-color: 26,175,255;")
        }

        setupAds(e, t, i) {
            let n=this.createElement("div");
            "number"==typeof this.config.adMode&&-1<this.config.adMode&&this.config.adMode<3&&this.config.adMode;
            n.classList.add("ejs_ad_iframe");
            var s=this.createElement("iframe");
            s.src=e,
            s.setAttribute("scrolling", "no"),
            s.setAttribute("frameborder", "no"),
            s.style.width=t,
            s.style.height=i;
            let o=this.createElement("div");
            o.classList.add("ejs_ad_close");
            e=this.createElement("a");

            o.appendChild(e),
            o.setAttribute("hidden", ""),
            n.appendChild(o),
            n.appendChild(s),
            1 !==this.config.adMode&&this.elements.parent.appendChild(n),
            this.addEventListener(e, "click", ()=> {
                    n.remove()
                }

            ),
            this.on("start-clicked", ()=> {
                    0===this.config.adMode&&n.remove(), 1===this.config.adMode&&this.elements.parent.appendChild(n)
                }

            ),
            this.on("start", ()=> {
                    o.removeAttribute("hidden"); var e="number"==typeof this.config.adTimer&&0<this.config.adTimer?this.config.adTimer:1e4; -1===this.config.adTimer&&n.remove(), 0 !==this.config.adTimer&&setTimeout(()=> {
                            n.remove()
                        }

                        , e)
                }

            )
        }

        adBlocked(e, t) {
            if(t)document.querySelector('div[class="ejs_ad_iframe"]').remove();

            else {
                try {
                    document.querySelector('div[class="ejs_ad_iframe"]').remove()
                }

                catch(e) {}

                this.config.adUrl=e,
                this.setupAds(this.config.adUrl, this.config.adSize[0], this.config.adSize[1])
            }
        }

        on(e, t) {
            this.functions||(this.functions= {}

            ),
            Array.isArray(this.functions[e])||(this.functions[e]=[]),
            this.functions[e].push(t)
        }

        callEvent(e, t) {
            return this.functions||(this.functions= {}

            ),
            Array.isArray(this.functions[e])?(this.functions[e].forEach(e=>e(t)), this.functions[e].length):0
        }

        setElements(e) {
            var t=this.createElement("div"),
            e=document.querySelector(e);

            e.innerHTML="",
            e.appendChild(t),
            this.game=t,
            this.elements= {
                main: this.game, parent:e
            }

            ,
            this.elements.parent.classList.add("ejs_parent"),
            this.elements.parent.setAttribute("tabindex", -1)
        }

        createStartButton() {
            var e=this.createElement("div");
            e.classList.add("ejs_start_button");
            let t=0;

            "string"==typeof this.config.backgroundImg&&(e.classList.add("ejs_start_button_border"), t=1),
            e.innerText="string"==typeof this.config.startBtnName?this.config.startBtnName:this.localization("Start Game"),
            "top"==this.config.alignStartButton?e.style.bottom="calc(100% - 20px)":"center"==this.config.alignStartButton&&(e.style.bottom="calc(50% + 22.5px + "+t+"px)"),
            this.elements.parent.appendChild(e),
            this.addEventListener(e, "touchstart", ()=> {
                    this.touch= !0
                }

            ),
            this.addEventListener(e, "click", this.startButtonClicked.bind(this)),
             !0===this.config.startOnLoad&&this.startButtonClicked(e),
            setTimeout(()=> {
                    this.callEvent("ready")
                }

                , 20)
        }

        startButtonClicked(e) {
            this.callEvent("start-clicked"),
            "touch"===e.pointerType&&(this.touch= !0),
            (e.preventDefault?(e.preventDefault(), e.target):e).remove(),
            this.createText(),
            this.downloadGameCore()
        }

        createText() {
            this.textElem=this.createElement("div"),
            this.textElem.classList.add("ejs_loading_text"),
            "string"==typeof this.config.backgroundImg&&this.textElem.classList.add("ejs_loading_text_glow"),
            this.textElem.innerText=this.localization("Loading..."),
            this.elements.parent.appendChild(this.textElem)
        }

        localization(e, t) {
            if(void 0 !==e)return !(e=e.toString()).includes("EmulatorJS v")&&this.config.langJson&&(void 0===t&&(t= !0),  !this.config.langJson[e]&&t&&(this.missingLang.includes(e)||this.missingLang.push(e), console.log("Translation not found for '"+e+"'. Language set to '"+this.config.language+"'")), this.config.langJson[e])||e
        }

        checkCompression(e, i, t) {

            return this.compression||(this.compression=new window.EJS_COMPRESSION(this)),
            i&&(this.textElem.innerText=i),
            this.compression.decompress(e, (e, t)=> {
                    this.textElem.innerText=t?i+e:e
                }

                , t)
        }

        checkCoreCompatibility(e) {
            if(this.versionAsInt(e.minimumEJSVersion)>this.versionAsInt(this.ejs_version))throw this.startGameError(this.localization("Outdated EmulatorJS version")),
            new Error("Core requires minimum EmulatorJS version of "+e.minimumEJSVersion)
        }

        startGameError(e) {
            console.log(e),
            this.textElem.innerText=e,
            this.textElem.style.color="red",
            this.textElem.style.bottom="10%",
            this.setupSettingsMenu(),
            this.loadSettings(),
            this.menu.failedToStart(),
            this.handleResize()
        }

        downloadGameCore() {
            if(this.textElem.innerText=this.localization("Download Game Core"), this.config.threads&&"function" !=typeof window.SharedArrayBuffer)this.startGameError(this.localization("Error for site owner")+"\n"+this.localization("Check console")),
            console.warn("Threads is set to true, but the SharedArrayBuffer function is not exposed. Threads requires 2 headers to be set when sending you html page. See https://stackoverflow.com/a/68630724");

            else {
                let s=e=> {
                    this.defaultCoreOpts= {}

                    ,
                    this.checkCompression(new Uint8Array(e), this.localization("Decompress Game Core")).then(e=> {
                            let t, i, n; for(var s in e) {
                                var o; s.endsWith(".wasm")?n=e[s]:s.endsWith(".worker.js")?i=e[s]:s.endsWith(".js")?t=e[s]:"build.json"===s?this.checkCoreCompatibility(JSON.parse((new TextDecoder).decode(e[s]))):"core.json"===s?(o=JSON.parse((new TextDecoder).decode(e[s])), this.extensions=o.extensions, this.coreName=o.name, this.repository=o.repo, this.defaultCoreOpts=o.options):"license.txt"===s&&(this.license=(new TextDecoder).decode(e[s]))
                            }

                            this.initGameCore(t, n, i)
                        }

                    )
                }

                ,
                t="cores/reports/"+this.getCore()+".json";

                this.downloadFile(t, i=> {
                        (i=-1===i||"string"==typeof t? {}

                            :i.data).buildStart||(i.buildStart=100*Math.random()), null===this.webgl2Enabled&&(this.webgl2Enabled=i.options&&i.options.defaultWebGL2); var e=this.supportsWebgl2&&this.webgl2Enabled?"":"-legacy"; let n=this.getCore()+(this.config.threads?"-thread":"")+e+"-wasm.data"; this.storage.core.get(n).then(e=> {
                                if(e&&e.version===i.buildStart&& !this.debug)s(e.data); else {
                                    let t="cores/"+n; this.downloadFile(t, e=> {
                                            -1===e?(console.log("File not found, attemping to fetch from emulatorjs cdn"), this.downloadFile("https://cdn.emulatorjs.org/stable/data/"+t, e=> {
                                                        -1===e?this.supportsWebgl2?this.startGameError(this.localization("Network Error")):this.startGameError(this.localization("Outdated graphics driver")):(console.warn("File was not found locally, but was found on the emulatorjs cdn.\nIt is recommended to download the stable release from here: https://cdn.emulatorjs.org/releases/"), s(e.data), this.storage.core.put(n, {
                                                                    version:i.buildStart, data:e.data
                                                                }

                                                            ))
                                                    }

                                                    , e=> {
                                                        this.textElem.innerText=this.localization("Download Game Core")+e
                                                    }

                                                    ,  !0, {
                                                        responseType:"arraybuffer", method:"GET"
                                                    }

                                                )):(s(e.data), this.storage.core.put(n, {
                                                        version:i.buildStart, data:e.data
                                                    }

                                                ))
                                        }

                                        , e=> {
                                            this.textElem.innerText=this.localization("Download Game Core")+e
                                        }

                                        ,  !1, {
                                            responseType:"arraybuffer", method:"GET"
                                        }

                                    )
                                }
                            }

                        )
                    }

                    , null,  !1, {
                        responseType:"text", method:"GET"
                    }

                )
            }
        }

        initGameCore(e, t, i) {
            var n=this.createElement("script");

            n.src=URL.createObjectURL(new Blob([e],{type:"application/javascript"})),
            n.addEventListener("load", ()=> {
                    this.initModule(t, i)
                }

            ),
            document.body.appendChild(n)
        }

        getBaseFileName(e) {
            if( !this.started&& !e)return null;
            if(e&&"game" !==this.config.gameUrl&& !this.config.gameUrl.startsWith("blob:"))return this.config.gameUrl.split("/").pop().split("#")[0].split("?")[0];

            if("string"==typeof this.config.gameName) {
